#!/bin/dash -f
# Configure wmii
wmiiscript=wmiirc # For wmii.sh
. wmii.sh

sudo /usr/sbin/rfkill block all
sudo /usr/sbin/rfkill unblock wifi
eval `cat ~/.fehbg` &
#xset m 5 1 #increase pointer speed
xmodmap -e "pointer 1 2 3 5 4 7 6" #invert touchpad scrolling directions
xscreensaver &
autocutsel &
eval `gpg-agent --daemon`
setxkbmap -layout us,ru -option terminate:ctrl_alt_bksp,grp:led_caps,grp:caps_toggle,compose:ralt
trayer --edge top --expand false --height 16 --widthtype request &
/usr/sbin/wpa_gui -t &
/usr/lib/notify-osd/notify-osd &
xcompmgr -C &

# Bars
noticetimeout=5
noticebar=/rbar/!notice
wmiir xwrite /ctl bar on top

MODKEY=Mod4
UP=k
DOWN=j
LEFT=h
RIGHT=l

export WMII_NORMCOLORS='#ffffff #000000 #006090'
export WMII_FOCUSCOLORS='#ffffff #009000 #000000'
export WMII_BACKGROUND='#333333'
#export WMII_FONT='-*-terminus-*-*-*-*-14-*-*-iso10646-*'
export WMII_FONT='xft:Terminus-10:bold'
export WMII_TERM="rxvt-unicode"

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)

#MPCPASSWD=$(cat ~/workspace/notes/mpd_pass)
#MPCCMD="mpc -h ${MPCPASSWD}@localhost -p 6601"
MPCCMD="mpc -h mpdpass@localhost -p 6601"

BAT='/sys/class/power_supply/BAT1'

battery_status() {
	if [ ! -e "$BAT" ]; then
		echo "No battery"
	else
		fe="`cat $BAT/energy_full`"
		ce="`cat $BAT/energy_now`"
		pwr="`cat $BAT/power_now`"
		echo "$((pwr / 1000)) mWh ($(((ce * 100)/ fe))%)"
	fi
}

status() {
	echo "`battery_status` | `date +%c`"
}

# Menu history
hist="${WMII_CONFPATH%%:*}/history"
histnum=5000

# Column Rules
wmiir write /colrules <<!
/gimp/ -> 17+83+41
/www/ -> 20+80 #IM messenger on the left
/.*/ -> 62+38 # Golden Ratio
!

# Tagging Rules
wmiir write /tagrules <<!
/MPlayer|VLC/ -> ~
/Chromium/ -> www
/Psi/ -> www
/Eclipse|NetBeans/ -> java
/GIMP|GNU Image Manipulation Program/ -> gimp
/Ario/ -> music
/Audacious/ -> music
/Ardour/ -> audio
/Audacity/ -> audio
/VirtualB[Oo][Xx]/ -> vbox
!

local_events() { true;}
wi_runconf -s wmiirc_local

echo $WMII_NORMCOLORS | wmiir create $noticebar

# Event processing
events() {
	cat <<'!'
# Events
Event CreateTag
	echo "$WMII_NORMCOLORS" "$@" | wmiir create "/lbar/$@"
Event DestroyTag
	wmiir remove "/lbar/$@"
Event FocusTag
	wmiir xwrite "/lbar/$@" "$WMII_FOCUSCOLORS" "$@"
Event UnfocusTag
	wmiir xwrite "/lbar/$@" "$WMII_NORMCOLORS" "$@"
Event UrgentTag
	shift
	wmiir xwrite "/lbar/$@" "*$@"
Event NotUrgentTag
	shift
	wmiir xwrite "/lbar/$@" "$@"
Event LeftBarClick LeftBarDND
	shift
	wmiir xwrite /ctl view "$@"
Event Unresponsive
	{
		client=$1; shift
		msg="The following client is not responding. What would you like to do?$wi_newline"
		resp=$(wihack -transient $client \
			      xmessage -nearmouse -buttons Kill,Wait -print
			      -fn "${WMII_FONT%%,*}" "$msg $(wmiir read /client/sel/label)")
		if [ "$resp" = Kill ]; then
			wmiir xwrite /client/$client/ctl slay &
		fi
	}&
Event Notice
	wmiir xwrite $noticebar $wi_arg

	kill $xpid 2>/dev/null # Let's hope this isn't reused...
	{ sleep $noticetimeout; wmiir xwrite $noticebar ' '; }&
	xpid = $!

# Menus
Menu Client-3-Delete
	wmiir xwrite /client/$1/ctl kill
Menu Client-3-Kill
	wmiir xwrite /client/$1/ctl slay
Menu Client-3-Fullscreen
	wmiir xwrite /client/$1/ctl Fullscreen on
Event ClientMouseDown
	wi_fnmenu Client $2 $1 &

Menu LBar-3-Delete
	tag=$1; clients=$(wmiir read "/tag/$tag/index" | awk '/[^#]/{print $2}')
	for c in $clients; do
		if [ "$tag" = "$(wmiir read /client/$c/tags)" ]; then
			wmiir xwrite /client/$c/ctl kill
		else
			wmiir xwrite /client/$c/tags -$tag
		fi
		if [ "$tag" = "$(wi_seltag)" ]; then
			newtag=$(wi_tags | awk -v't='$tag '
				$1 == t { if(!l) getline l
					  print l
					  exit }
				{ l = $0 }')
			wmiir xwrite /ctl view $newtag
		fi
	done
Event LeftBarMouseDown
	wi_fnmenu LBar "$@" &

# Actions
Action showkeys
	echo "$KeysHelp" | xmessage -file - -fn ${WMII_FONT%%,*}
Action quit
	wmiir xwrite /ctl quit
Action exec
	wmiir xwrite /ctl exec "$@"
Action rehash
	wi_proglist $PATH >$progsfile
Action status
	set +xv
	if wmiir remove /rbar/status 2>/dev/null; then
		sleep 2
	fi
	echo "$WMII_NORMCOLORS" | wmiir create /rbar/status
	while status | wmiir write /rbar/status; do
		sleep 1
	done

# Key Bindings
KeyGroup Moving around
Key $MODKEY-$LEFT   # Select the client to the left
	wmiir xwrite /tag/sel/ctl select left
Key $MODKEY-$RIGHT  # Select the client to the right
	wmiir xwrite /tag/sel/ctl select right
Key $MODKEY-$UP     # Select the client above
	wmiir xwrite /tag/sel/ctl select up
Key $MODKEY-$DOWN   # Select the client below
	wmiir xwrite /tag/sel/ctl select down

Key $MODKEY-space   # Toggle between floating and managed layers
	wmiir xwrite /tag/sel/ctl select toggle

KeyGroup Moving through stacks
Key $MODKEY-Control-$UP    # Select the stack above
	wmiir xwrite /tag/sel/ctl select up stack
Key $MODKEY-Control-$DOWN  # Select the stack below
	wmiir xwrite /tag/sel/ctl select down stack

KeyGroup Moving clients around
Key $MODKEY-Shift-$LEFT   # Move selected client to the left
	wmiir xwrite /tag/sel/ctl send sel left
Key $MODKEY-Shift-$RIGHT  # Move selected client to the right
	wmiir xwrite /tag/sel/ctl send sel right
Key $MODKEY-Shift-$UP     # Move selected client up
	wmiir xwrite /tag/sel/ctl send sel up
Key $MODKEY-Shift-$DOWN   # Move selected client down
	wmiir xwrite /tag/sel/ctl send sel down

Key $MODKEY-Shift-space   # Toggle selected client between floating and managed layers
	wmiir xwrite /tag/sel/ctl send sel toggle

KeyGroup Client actions
Key $MODKEY-f # Toggle selected client's fullsceen state
	wmiir xwrite /client/sel/ctl Fullscreen toggle
Key $MODKEY-Shift-c # Close client
	wmiir xwrite /client/sel/ctl kill

KeyGroup Changing column modes
Key $MODKEY-d # Set column to default mode
	wmiir xwrite /tag/sel/ctl colmode sel default-max
Key $MODKEY-s # Set column to stack mode
	wmiir xwrite /tag/sel/ctl colmode sel stack-max
Key $MODKEY-m # Set column to max mode
	wmiir xwrite /tag/sel/ctl colmode sel stack+max

KeyGroup Running programs
Key $MODKEY-a      # Open wmii actions menu
	action $(wi_actions | wimenu -h "${hist}.actions" -n $histnum) &
Key $MODKEY-p      # Open program menu
	eval wmiir setsid "$(wimenu -h "${hist}.progs" -n $histnum <$progsfile)" &

Key $MODKEY-Return # Launch a terminal
	eval wmiir setsid $WMII_TERM &

#custom keys
Key $MODKEY-i #Invert screen
	xcalib -i -a

Key XF86Launch1 {
	eval wmiir setsid $WMII_TERM &
}

Key Help {
	eval wmiir setsid $WMII_TERM &
}

Key XF86AudioLowerVolume {
	amixer -q set Master 1- unmute
}

Key XF86AudioRaiseVolume {
	amixer -q set Master 1+ unmute
}

Key XF86AudioStop {
	$MPCCMD stop
}

Key XF86AudioPlay {
	$MPCCMD toggle
}

Key XF86AudioNext {
	$MPCCMD next
}

Key XF86AudioPrev {
	$MPCCMD prev
}

Key $MODKEY-Left {
	$MPCCMD prev
}

Key $MODKEY-Right {
	$MPCCMD next
}

Key $MODKEY-Up {
	$MPCCMD stop
}

Key $MODKEY-Down {
	$MPCCMD toggle
}

Key XF86ScreenSaver {
	setsid xscreensaver-command -lock &
}

Key $MODKEY-l {
	setsid xscreensaver-command -lock &
}

Key $MODKEY-F1 {
	setsid xscreensaver-command -lock &
}

Key XF86Display {
	xset dpms force off
}

Key $MODKEY-F12 {
	scrot -q 100 ~/screenshot-%F-%H%M%S.png &
}

Key $MODKEY-F11 {
	scrot -q 80 ~/screenshot-%F-%H%M%S.jpg &
}

KeyGroup Other
Key $MODKEY-Control-t # Toggle all other key bindings
	case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
	0|1)
		echo -n "$Keys" | wmiir write /keys
		wmiir xwrite /ctl grabmod $MODKEY;;
	*)
		wmiir xwrite /keys $MODKEY-Control-t
		wmiir xwrite /ctl grabmod Mod3;;
	esac

KeyGroup Tag actions
Key $MODKEY-t       # Change to another tag
	(tag=$(wi_tags | wimenu -h "${hist}.tags" -n 50) && wmiir xwrite /ctl view $tag) &
Key $MODKEY-Shift-t # Retag the selected client
	c=$(wi_selclient)
	(tag=$(wi_tags | wimenu -h "${hist}.tags" -n 50) && wmiir xwrite /client/$c/tags $tag) &
!
	for i in 0 1 2 3 4 5 6 7 8 9; do
		cat <<!
Key $MODKEY-$i		 # Move to the numbered view
	wmiir xwrite /ctl view "$i"
Key $MODKEY-Shift-$i     # Retag selected client with the numbered tag
	wmiir xwrite /client/sel/tags "$i"
!
	done
}
wi_events events local_events

# WM Configuration
wmiir write /ctl <<!
	font $WMII_FONT
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	border 1
!
xsetroot -solid "$WMII_BACKGROUND" &

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &
wi_proglist $PATH >$progsfile &

# Setup Tag Bar
IFS="$wi_newline"
wmiir rm $(wmiir ls /lbar | sed 's,^,/lbar/,') >/dev/null
seltag=$(wmiir read /tag/sel/ctl | sed 1q)
unset IFS
wi_tags | while read tag
do
	if [ "$tag" = "$seltag" ]; then
		echo "$WMII_FOCUSCOLORS" "$tag"
	else
		echo "$WMII_NORMCOLORS" "$tag"
	fi | wmiir create "/lbar/$tag"
done

wi_eventloop

